export type CategoryType = 'personal' | 'laburo' | 'freelance' | 'social' | 'salud' | 'otros';

export type ActivityStatus = 'completed' | 'planned' | 'cancelled';

export interface Activity {
  id: string;
  text: string;
  category: CategoryType;
  timestamp: Date;
  points: number;
  status: ActivityStatus;
  plannedDate?: Date;
}

export interface DailyStats {
  totalActivities: number;
  totalPoints: number;
  categoriesUsed: CategoryType[];
  date: string;
}

export interface Badge {
  id: string;
  name: string;
  description: string;
  icon: string;
  earned: boolean;
  earnedDate?: Date;
}

// Sistema de H√°bitos
export interface DailyHabit {
  date: string; // YYYY-MM-DD
  categoryProgress: Record<CategoryType, boolean>;
  bonusEarned: boolean;
  totalPoints: number;
  completedCategories: number;
}

export interface HabitStreak {
  category: CategoryType;
  currentStreak: number;
  longestStreak: number;
  lastCompletedDate: string;
}

// Estad√≠sticas Extendidas
export interface WeeklyStats {
  startDate: string; // YYYY-MM-DD (Monday)
  endDate: string; // YYYY-MM-DD (Sunday)
  totalPoints: number;
  totalActivities: number;
  completeDays: number; // d√≠as con al menos 1 actividad
  bonusDays: number; // d√≠as con todas las categor√≠as completas
  categoryBreakdown: Record<CategoryType, number>; // puntos por categor√≠a
  averageActivitiesPerDay: number;
  bestDay: {
    date: string;
    points: number;
    activities: number;
  };
}

export interface MonthlyStats {
  month: string; // YYYY-MM
  totalPoints: number;
  totalActivities: number;
  completeDays: number;
  bonusDays: number;
  totalBonusPoints: number;
  categoryDistribution: Record<CategoryType, number>;
  weeklyBreakdown: WeeklyStats[];
  bestWeek: WeeklyStats;
  averagePointsPerDay: number;
  streakData: HabitStreak[];
  completionRate: number; // porcentaje de d√≠as con al menos 1 actividad
}

export const CATEGORIES = {
  personal: { label: 'Personal', color: 'category-personal', points: 10 },
  laburo: { label: 'Trabajo', color: 'category-laburo', points: 15 },
  freelance: { label: 'Freelance', color: 'category-freelance', points: 12 },
  social: { label: 'Social', color: 'category-social', points: 20 },
  salud: { label: 'Salud', color: 'category-salud', points: 20 },
  otros: { label: 'Otros', color: 'category-otros', points: 8 },
} as const;

export const getContextualMessage = (): string => {
  const hour = new Date().getHours();
  const dayName = new Date().toLocaleDateString('es-ES', { weekday: 'long' });
  
  // Mensajes seg√∫n la hora del d√≠a
  if (hour >= 5 && hour < 12) {
    return `¬°Buenos d√≠as! Es ${dayName}, perfecto para empezar con energ√≠a üåÖ`;
  } else if (hour >= 12 && hour < 18) {
    return `¬°Buenas tardes! ¬øC√≥mo va tu ${dayName}? Sigue registrando tus logros üåû`;
  } else if (hour >= 18 && hour < 22) {
    return `¬°Buenas noches! Reflexiona sobre tu ${dayName}, cada paso cuenta üåô`;
  } else {
    return `Es tarde, pero nunca es mal momento para reconocer tus logros de hoy üåå`;
  }
};

export const ACHIEVEMENT_MESSAGES = [
  "¬°Incre√≠ble! Est√°s en racha üî•",
  "Tus h√°bitos est√°n mejorando üìà",
  "¬°Qu√© consistencia tan admirable! ‚≠ê",
  "Cada actividad te acerca a tus metas üéØ",
  "Tu dedicaci√≥n es inspiradora üí™",
  "¬°Sigue as√≠, vas por buen camino! üöÄ",
];

// Sistema de Puntos Bonus
export const BONUS_POINTS = {
  DAILY_COMPLETE: 50,    // Por completar todas las 6 categor√≠as en un d√≠a
  WEEKLY_COMPLETE: 100,  // Por tener 5+ d√≠as completos en la semana
  MONTHLY_COMPLETE: 500, // Por tener 20+ d√≠as completos en el mes
  STREAK_3_DAYS: 25,     // Bonus por racha de 3 d√≠as
  STREAK_7_DAYS: 75,     // Bonus por racha de 7 d√≠as
  STREAK_30_DAYS: 300,   // Bonus por racha de 30 d√≠as
} as const;

// N√∫mero total de categor√≠as para el c√°lculo de bonus
export const TOTAL_CATEGORIES = 6;

// Mensajes espec√≠ficos para h√°bitos
export const HABIT_MESSAGES = {
  DAILY_COMPLETE: "üéâ ¬°D√≠a perfecto! Completaste todas las categor√≠as",
  BONUS_EARNED: "‚≠ê ¬°Bonus ganado! +{points} puntos extra",
  STREAK_MILESTONE: "üî• ¬°{days} d√≠as seguidos! Est√°s imparable",
  FIRST_HABIT: "‚ú® ¬°Primer h√°bito del d√≠a! Buen comienzo",
  CATEGORY_COMPLETE: "‚úÖ {category} completada por hoy",
} as const;

// Utilidades para fechas
export const getDateString = (date: Date = new Date()): string => {
  return date.toISOString().split('T')[0];
};

export const getWeekStart = (date: Date): Date => {
  const d = new Date(date);
  const day = d.getDay();
  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Lunes como primer d√≠a
  return new Date(d.setDate(diff));
};

export const getMonthString = (date: Date = new Date()): string => {
  return date.toISOString().slice(0, 7); // YYYY-MM
};

// Weekend detection utilities
export const isWeekend = (date: Date): boolean => {
  const day = date.getDay();
  return day === 0 || day === 6; // Sunday (0) or Saturday (6)
};

// Get required categories for a specific date (accounting for weekend wildcards)
export const getRequiredCategoriesForDate = (date: Date): CategoryType[] => {
  const allCategories = Object.keys(CATEGORIES) as CategoryType[];

  if (isWeekend(date)) {
    // On weekends, exclude 'laburo' and 'otros' from required categories
    return allCategories.filter(cat => cat !== 'laburo' && cat !== 'otros');
  }

  return allCategories; // All categories required on weekdays
};

// Get total required categories count for a date
export const getRequiredCategoryCount = (date: Date): number => {
  return getRequiredCategoriesForDate(date).length;
};